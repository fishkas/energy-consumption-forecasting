import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score
import os

print("=" * 60)
print("üöÄ –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–ï –≠–ù–ï–†–ì–û–ü–û–¢–†–ï–ë–õ–ï–ù–ò–Ø –ó–î–ê–ù–ò–ô")
print("=" * 60)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_csv('data/raw_data.csv')

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
df['building_age'] = 2024 - df['year_built']
df['energy_per_sqft'] = df['energy_consumption'] / df['square_footage']

# –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
le = LabelEncoder()
df['building_type_encoded'] = le.fit_transform(df['building_type'])
df['heating_type_encoded'] = le.fit_transform(df['heating_type'])

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
df.to_csv('data/processed_data.csv', index=False)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
features = ['square_footage', 'occupant_count', 'avg_temperature', 
            'avg_humidity', 'building_age', 'building_type_encoded', 'heating_type_encoded']
X = df[features]
y = df['energy_consumption']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(n_estimators=100, random_state=42, max_depth=10)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
importance = pd.DataFrame({
    'feature': features,
    'importance': model.feature_importances_
}).sort_values('importance', ascending=False)

# üìä –í–´–í–û–î –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
print("\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–û–î–ï–õ–ò:")
print("-" * 40)
print(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (MAE): {mae:.2f} –∫–í—Ç¬∑—á")
print(f"‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏ (R¬≤): {r2:.4f}")
print(f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: {r2*100:.1f}%")

print("\nüîç –í–ê–ñ–ù–û–°–¢–¨ –§–ê–ö–¢–û–†–û–í:")
print("-" * 40)
for i, row in importance.iterrows():
    print(f"‚Ä¢ {row['feature']:25} - {row['importance']*100:5.1f}%")

print("\nüí° –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:")
print("-" * 40)
top_feature = importance.iloc[0]['feature']
top_importance = importance.iloc[0]['importance'] * 100

print(f"‚Ä¢ –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä –≤–ª–∏—è–Ω–∏—è: {top_feature} ({top_importance:.1f}%)")

if top_feature == 'square_footage':
    print("‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤ –∑–¥–∞–Ω–∏—è—Ö —Å –±–æ–ª—å—à–æ–π –ø–ª–æ—â–∞–¥—å—é")
elif top_feature == 'occupant_count':
    print("‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –í–Ω–µ–¥—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤ –∑–¥–∞–Ω–∏—è—Ö —Å –≤—ã—Å–æ–∫–æ–π –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ—Å—Ç—å—é")
elif top_feature == 'building_type_encoded':
    print("‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –∏ –∂–∏–ª—ã—Ö –∑–¥–∞–Ω–∏–π")
elif top_feature == 'avg_temperature':
    print("‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–ª—É—á—à–∏—Ç–µ —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏—é –∏ —Å–∏—Å—Ç–µ–º—ã –∫–ª–∏–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª—è")

print("\n" + "=" * 60)
print("‚úÖ –ü–†–û–ï–ö–¢ –ó–ê–í–ï–†–®–ï–ù")
print("=" * 60)

# ‚≠ê –î–û–ë–ê–í–õ–ï–ù–û: –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏
print("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
with open('reports/results.txt', 'w', encoding='utf-8') as f:
    f.write("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –≠–ù–ï–†–ì–û–ü–û–¢–†–ï–ë–õ–ï–ù–ò–Ø\n")
    f.write("=" * 50 + "\n")
    f.write(f"–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {r2*100:.1f}%\n")
    f.write(f"–°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {mae:.2f} –∫–í—Ç¬∑—á\n")
    f.write("\n–¢–æ–ø-3 —Ñ–∞–∫—Ç–æ—Ä–∞ –≤–ª–∏—è–Ω–∏—è:\n")
    for i, row in importance.head(3).iterrows():
        f.write(f"{i+1}. {row['feature']} - {row['importance']*100:.1f}%\n")

print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: reports/results.txt")
input()
