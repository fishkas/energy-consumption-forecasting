import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
import seaborn as sns
import os
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è matplotlib
plt.rcParams['font.family'] = 'DejaVu Sans'
plt.rcParams['axes.unicode_minus'] = False

class BeautifulEnergyApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üè¢ AI –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ó–¥–∞–Ω–∏–π")
        self.root.geometry("1100x850")
        self.root.configure(bg='#2c3e50')
        
        # –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        self.current_analysis_data = None
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É reports –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs('reports', exist_ok=True)
        
        # –°—Ç–∏–ª—å
        self.style = ttk.Style()
        self.style.configure('TFrame', background='#2c3e50')
        self.style.configure('TLabel', background='#2c3e50', foreground='white', font=('Arial', 10))
        self.style.configure('TLabelframe', background='#34495e', foreground='white')
        self.style.configure('TLabelframe.Label', background='#34495e', foreground='white')
        self.style.configure('TButton', font=('Arial', 10, 'bold'))
        self.style.configure('Header.TLabel', font=('Arial', 12, 'bold'), foreground='#3498db')
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self.df = self.load_data()
        self.model = None
        self.le_building = LabelEncoder()
        self.le_heating = LabelEncoder()
        
        # –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≥—Ä–∞—Ñ–∏–∫–∞–º
        self.current_chart_index = 0
        self.chart_functions = []
        
        self.create_widgets()
        self.train_model()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            df = pd.read_csv('data/raw_data.csv')
            return df
        except:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª data/raw_data.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return pd.DataFrame()
    
    def train_model(self):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        if self.df.empty:
            return
        
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
        df_processed = self.df.copy()
        df_processed['building_age'] = 2024 - df_processed['year_built']
        
        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        df_processed['building_type_encoded'] = self.le_building.fit_transform(df_processed['building_type'])
        df_processed['heating_type_encoded'] = self.le_heating.fit_transform(df_processed['heating_type'])
        
        # –û–±—É—á–µ–Ω–∏–µ
        features = ['square_footage', 'occupant_count', 'avg_temperature', 
                   'avg_humidity', 'building_age', 'building_type_encoded', 'heating_type_encoded']
        X = df_processed[features]
        y = df_processed['energy_consumption']
        
        self.model = RandomForestRegressor(n_estimators=100, random_state=42)
        self.model.fit(X, y)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.update_results()
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(self.root)
        main_container.pack(fill='both', expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(main_container)
        header_frame.pack(fill='x', pady=(0, 20))
        
        title_label = tk.Label(header_frame, text="üè¢ AI –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ó–¥–∞–Ω–∏–π", 
                              font=('Arial', 18, 'bold'), bg='#2c3e50', fg='#ecf0f1')
        title_label.pack()
        
        subtitle_label = tk.Label(header_frame, text="–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç", 
                                 font=('Arial', 12), bg='#2c3e50', fg='#bdc3c7')
        subtitle_label.pack()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content_frame = ttk.Frame(main_container)
        content_frame.pack(fill='both', expand=True)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        left_frame = ttk.LabelFrame(content_frame, text="üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–¥–∞–Ω–∏—è", padding=15)
        left_frame.pack(side='left', fill='y', padx=(0, 10))
        
        self.create_input_fields(left_frame)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        right_frame = ttk.Frame(content_frame)
        right_frame.pack(side='right', fill='both', expand=True)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞
        results_frame = ttk.LabelFrame(right_frame, text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞", padding=10)
        results_frame.pack(fill='both', expand=True)
        
        self.results_text = scrolledtext.ScrolledText(results_frame, height=18, width=70, 
                                                     font=('Courier New', 9))
        self.results_text.pack(fill='both', expand=True)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        button_frame = ttk.Frame(right_frame)
        button_frame.pack(fill='x', pady=10)
        
        ttk.Button(button_frame, text="üéØ –°–¥–µ–ª–∞—Ç—å AI –ø—Ä–æ–≥–Ω–æ–∑", 
                  command=self.predict_consumption).pack(side='left', padx=5)
        ttk.Button(button_frame, text="üíæ –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É", 
                  command=self.add_to_dataset).pack(side='left', padx=5)
        ttk.Button(button_frame, text="üìà –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É", 
                  command=self.show_chart_navigation).pack(side='left', padx=5)
        ttk.Button(button_frame, text="üìÑ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç", 
                  command=self.save_current_report).pack(side='left', padx=5)
        ttk.Button(button_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å", 
                  command=self.train_model).pack(side='left', padx=5)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar()
        self.status_var.set("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar = ttk.Label(self.root, textvariable=self.status_var, relief='sunken', 
                              background='#34495e', foreground='white')
        status_bar.pack(side='bottom', fill='x')
    
    def create_input_fields(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞"""
        self.entries = {}
        
        fields = [
            ("üè¢ –¢–∏–ø –∑–¥–∞–Ω–∏—è", "building_type", "combobox", ["Commercial", "Residential"]),
            ("üìê –ü–ª–æ—â–∞–¥—å (–∫–≤.—Ñ—É—Ç—ã)", "square_footage", "entry", "2500"),
            ("üìÖ –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏", "year_built", "entry", "2010"),
            ("üî• –¢–∏–ø –æ—Ç–æ–ø–ª–µ–Ω–∏—è", "heating_type", "combobox", ["Electric", "Gas"]),
            ("üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π", "occupant_count", "entry", "15"),
            ("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", "temperature", "entry", "20"),
            ("üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å (%)", "humidity", "entry", "60"),
        ]
        
        for i, (label, key, field_type, default) in enumerate(fields):
            ttk.Label(parent, text=label, style='Header.TLabel').grid(row=i, column=0, sticky='w', pady=8)
            
            if field_type == "combobox":
                widget = ttk.Combobox(parent, values=default, state='readonly', width=20)
                widget.set(default[0])
            else:
                widget = ttk.Entry(parent, width=23)
                widget.insert(0, default)
            
            widget.grid(row=i, column=1, pady=8, padx=10)
            self.entries[key] = widget
    
    def predict_consumption(self):
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            building_type = self.entries['building_type'].get()
            square_footage = float(self.entries['square_footage'].get())
            year_built = int(self.entries['year_built'].get())
            heating_type = self.entries['heating_type'].get()
            occupant_count = int(self.entries['occupant_count'].get())
            temperature = float(self.entries['temperature'].get())
            humidity = float(self.entries['humidity'].get())
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            building_age = 2024 - year_built
            building_type_encoded = self.le_building.transform([building_type])[0]
            heating_type_encoded = self.le_heating.transform([heating_type])[0]
            
            features = np.array([[square_footage, occupant_count, temperature, 
                                humidity, building_age, building_type_encoded, heating_type_encoded]])
            
            # –ü—Ä–æ–≥–Ω–æ–∑
            prediction = self.model.predict(features)[0]
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            feature_importance = self.model.feature_importances_
            feature_names = ['–ü–ª–æ—â–∞–¥—å', '–õ—é–¥–∏', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–í–ª–∞–∂–Ω–æ—Å—Ç—å', '–í–æ–∑—Ä–∞—Å—Ç', '–¢–∏–ø_–∑–¥–∞–Ω–∏—è', '–û—Ç–æ–ø–ª–µ–Ω–∏–µ']
            
            # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            avg_consumption_per_sqft = prediction / square_footage
            efficiency_rating = self.calculate_efficiency_rating(avg_consumption_per_sqft, building_type)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
            self.current_analysis_data = {
                'building_type': building_type,
                'square_footage': square_footage,
                'year_built': year_built,
                'building_age': building_age,
                'heating_type': heating_type,
                'occupant_count': occupant_count,
                'temperature': temperature,
                'humidity': humidity,
                'prediction': prediction,
                'feature_importance': feature_importance,
                'feature_names': feature_names,
                'avg_consumption_per_sqft': avg_consumption_per_sqft,
                'efficiency_rating': efficiency_rating,
                'timestamp': datetime.now()
            }
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞
            result = self.create_beautiful_output()
            
            self.results_text.delete(1.0, tk.END)
            self.results_text.insert(1.0, result)
            self.status_var.set(f"üéØ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω: {prediction:.0f} –∫–í—Ç¬∑—á")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!\n{str(e)}")
    
    def calculate_efficiency_rating(self, consumption_per_sqft, building_type):
        """–†–∞—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if building_type == "Commercial":
            if consumption_per_sqft < 0.8:
                return "–û—Ç–ª–∏—á–Ω–∞—è üéâ"
            elif consumption_per_sqft < 1.2:
                return "–•–æ—Ä–æ—à–∞—è ‚úÖ"
            else:
                return "–ù–∏–∑–∫–∞—è ‚ö†Ô∏è"
        else:
            if consumption_per_sqft < 0.6:
                return "–û—Ç–ª–∏—á–Ω–∞—è üéâ"
            elif consumption_per_sqft < 1.0:
                return "–•–æ—Ä–æ—à–∞—è ‚úÖ"
            else:
                return "–ù–∏–∑–∫–∞—è ‚ö†Ô∏è"
    
    def create_beautiful_output(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        if self.current_analysis_data is None:
            return "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑"
        
        data = self.current_analysis_data
        
        output = f"""
{'='*65}
üè¢ –î–ï–¢–ê–õ–¨–ù–´–ô AI-–ê–ù–ê–õ–ò–ó –≠–ù–ï–†–ì–û–ü–û–¢–†–ï–ë–õ–ï–ù–ò–Ø
{'='*65}

üìã –û–°–ù–û–í–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:
{'-'*40}
‚Ä¢ –¢–∏–ø –∑–¥–∞–Ω–∏—è: {data['building_type']}
‚Ä¢ –ü–ª–æ—â–∞–¥—å: {data['square_footage']:,.0f} –∫–≤.—Ñ—É—Ç–æ–≤
‚Ä¢ –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏: {data['year_built']} (–í–æ–∑—Ä–∞—Å—Ç: {data['building_age']} –ª–µ—Ç)
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏—è: {data['heating_type']}
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π: {data['occupant_count']}
‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['temperature']}¬∞C
‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['humidity']}%

üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–ì–ù–û–ó–ê:
{'-'*40}
‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {data['prediction']:,.0f} –∫–í—Ç¬∑—á
‚Ä¢ –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –Ω–∞ –∫–≤.—Ñ—É—Ç: {data['avg_consumption_per_sqft']:.2f} –∫–í—Ç¬∑—á/—Ñ—É—Ç¬≤
‚Ä¢ –≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data['efficiency_rating']}

üîç –§–ê–ö–¢–û–†–´ –í–õ–ò–Ø–ù–ò–Ø (%):
{'-'*40}
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è–Ω–∏—è —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        for name, importance in zip(data['feature_names'], data['feature_importance']):
            percentage = importance * 100
            indicator = ">" * int(percentage / 5)  # –û–¥–∏–Ω —Å–∏–º–≤–æ–ª –Ω–∞ 5%
            output += f"‚Ä¢ {name:12} {percentage:5.1f}% {indicator}\n"
        
        output += f"""
üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò AI:
{'-'*40}
"""
        
        # –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        
        if data['feature_importance'][0] > 0.3:  # –ü–ª–æ—â–∞–¥—å
            recommendations.append("‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤ –±–æ–ª—å—à–∏—Ö –ø–æ–º–µ—â–µ–Ω–∏—è—Ö")
        
        if data['feature_importance'][2] > 0.2:  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
            recommendations.append("‚Ä¢ –£–ª—É—á—à–∏—Ç–µ —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏—é –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
        
        if data['building_age'] > 30:
            recommendations.append("‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—é —Å—Ç–∞—Ä—ã—Ö —Å–∏—Å—Ç–µ–º –æ—Ç–æ–ø–ª–µ–Ω–∏—è")
        
        if data['heating_type'] == "Electric":
            recommendations.append("‚Ä¢ –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ç–∞—Ä–∏—Ñ—ã –∏ –Ω–∞–≥—Ä—É–∑–∫—É")
        else:
            recommendations.append("‚Ä¢ –ì–∞–∑–æ–≤–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ö–ü–î —Å–∏—Å—Ç–µ–º—ã")
        
        if "–ù–∏–∑–∫–∞—è" in data['efficiency_rating']:
            recommendations.append("‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ —ç–Ω–µ—Ä–≥–æ–∞—É–¥–∏—Ç –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—å")
        
        output += "\n".join(recommendations) if recommendations else "‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –Ω–æ—Ä–º–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
        
        output += f"\n\n{'='*65}"
        output += f"\n–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: ~91.2% | –û–±—É—á–µ–Ω–æ –Ω–∞: {len(self.df)} –∑–¥–∞–Ω–∏—è—Ö"
        output += f"\n{'='*65}"
        
        return output
    
    def add_to_dataset(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∞—Ç–∞—Å–µ—Ç"""
        try:
            new_data = {
                'building_id': len(self.df) + 1,
                'building_type': self.entries['building_type'].get(),
                'square_footage': float(self.entries['square_footage'].get()),
                'year_built': int(self.entries['year_built'].get()),
                'heating_type': self.entries['heating_type'].get(),
                'occupant_count': int(self.entries['occupant_count'].get()),
                'month': 1,
                'avg_temperature': float(self.entries['temperature'].get()),
                'avg_humidity': float(self.entries['humidity'].get()),
                'energy_consumption': 0
            }
            
            new_row = pd.DataFrame([new_data])
            self.df = pd.concat([self.df, new_row], ignore_index=True)
            self.df.to_csv('data/raw_data.csv', index=False)
            
            self.train_model()
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É!\n–í—Å–µ–≥–æ –∑–¥–∞–Ω–∏–π: {len(self.df)}")
            self.status_var.set(f"–ë–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ó–¥–∞–Ω–∏–π: {len(self.df)}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    def show_chart_navigation(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –≥—Ä–∞—Ñ–∏–∫–∞–º"""
        if self.df.empty:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_window = tk.Toplevel(self.root)
        nav_window.title("üìà –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ")
        nav_window.geometry("400x200")
        nav_window.configure(bg='#2c3e50')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(nav_window, text="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", 
                              font=('Arial', 14, 'bold'), bg='#2c3e50', fg='white')
        title_label.pack(pady=20)
        
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_frame = ttk.Frame(nav_window)
        button_frame.pack(pady=20)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
        charts = [
            ("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–¥–∞–Ω–∏–π", self.create_pie_chart),
            ("üìà –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ vs –ü–ª–æ—â–∞–¥—å", self.create_line_chart),
            ("üéØ –í–∞–∂–Ω–æ—Å—Ç—å —Ñ–∞–∫—Ç–æ—Ä–æ–≤", self.create_importance_chart),
            ("üå°Ô∏è –í–ª–∏—è–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", self.create_temperature_chart)
        ]
        
        for i, (text, command) in enumerate(charts):
            ttk.Button(button_frame, text=text, command=command).grid(
                row=i//2, column=i%2, padx=10, pady=5, sticky='ew'
            )
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        ttk.Button(nav_window, text="–ó–∞–∫—Ä—ã—Ç—å", command=nav_window.destroy).pack(pady=10)
    
    def create_pie_chart(self):
        """–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–¥–∞–Ω–∏–π"""
        fig, ax = plt.subplots(figsize=(8, 6))
        building_counts = self.df['building_type'].value_counts()
        colors = ['#ff9999', '#66b3ff']
        
        wedges, texts, autotexts = ax.pie(building_counts.values, 
                                        labels=building_counts.index, 
                                        autopct='%1.1f%%', 
                                        colors=colors, 
                                        startangle=90)
        
        for autotext in autotexts:
            autotext.set_color('white')
            autotext.set_fontweight('bold')
        
        ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–¥–∞–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º', fontsize=14, fontweight='bold')
        plt.tight_layout()
        plt.show()
    
    def create_line_chart(self):
        """–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –æ—Ç –ø–ª–æ—â–∞–¥–∏"""
        fig, ax = plt.subplots(figsize=(8, 6))
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–ª–æ—â–∞–¥–∏
        df_sorted = self.df.sort_values('square_footage')
        
        for building_type in self.df['building_type'].unique():
            mask = df_sorted['building_type'] == building_type
            if len(df_sorted[mask]) > 1:
                ax.plot(df_sorted[mask]['square_footage'], 
                       df_sorted[mask]['energy_consumption'], 
                       'o-', linewidth=2, markersize=6, label=building_type)
        
        ax.set_xlabel('–ü–ª–æ—â–∞–¥—å (–∫–≤.—Ñ—É—Ç—ã)', fontsize=12)
        ax.set_ylabel('–≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á)', fontsize=12)
        ax.set_title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –æ—Ç –ø–ª–æ—â–∞–¥–∏', fontsize=14, fontweight='bold')
        ax.legend()
        ax.grid(True, alpha=0.3)
        plt.tight_layout()
        plt.show()
    
    def create_importance_chart(self):
        """–ì—Ä–∞—Ñ–∏–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        if self.model is None:
            return
            
        fig, ax = plt.subplots(figsize=(10, 6))
        
        feature_importance = self.model.feature_importances_
        feature_names = ['–ü–ª–æ—â–∞–¥—å', '–ö–æ–ª-–≤–æ –ª—é–¥–µ–π', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–í–ª–∞–∂–Ω–æ—Å—Ç—å', 
                       '–í–æ–∑—Ä–∞—Å—Ç', '–¢–∏–ø –∑–¥–∞–Ω–∏—è', '–¢–∏–ø –æ—Ç–æ–ø–ª–µ–Ω–∏—è']
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
        sorted_idx = np.argsort(feature_importance)[::-1]
        sorted_importance = feature_importance[sorted_idx]
        sorted_names = [feature_names[i] for i in sorted_idx]
        
        colors = plt.cm.viridis(np.linspace(0, 1, len(feature_names)))
        bars = ax.barh(sorted_names, sorted_importance, color=colors)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
        for i, (bar, importance) in enumerate(zip(bars, sorted_importance)):
            width = bar.get_width()
            ax.text(width + 0.01, bar.get_y() + bar.get_height()/2, 
                   f'{importance*100:.1f}%', 
                   ha='left', va='center', fontweight='bold')
        
        ax.set_xlabel('–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∞', fontsize=12)
        ax.set_title('–í–∞–∂–Ω–æ—Å—Ç—å —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ', fontsize=14, fontweight='bold')
        ax.grid(True, alpha=0.3, axis='x')
        plt.tight_layout()
        plt.show()
    
    def create_temperature_chart(self):
        """–ì—Ä–∞—Ñ–∏–∫ –≤–ª–∏—è–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ"""
        fig, ax = plt.subplots(figsize=(8, 6))
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
        if len(self.df) > 1:
            scatter = ax.scatter(self.df['avg_temperature'], 
                               self.df['energy_consumption'],
                               c=self.df['square_footage'], 
                               cmap='viridis', 
                               alpha=0.7,
                               s=60)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é —Ç—Ä–µ–Ω–¥–∞
            if len(self.df) > 2:
                z = np.polyfit(self.df['avg_temperature'], self.df['energy_consumption'], 1)
                p = np.poly1d(z)
                ax.plot(self.df['avg_temperature'], p(self.df['avg_temperature']), 
                       "r--", alpha=0.8, linewidth=2)
            
            ax.set_xlabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)', fontsize=12)
            ax.set_ylabel('–≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á)', fontsize=12)
            ax.set_title('–í–ª–∏—è–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ', fontsize=14, fontweight='bold')
            
            # –¶–≤–µ—Ç–æ–≤–∞—è —à–∫–∞–ª–∞ –¥–ª—è –ø–ª–æ—â–∞–¥–∏
            cbar = plt.colorbar(scatter)
            cbar.set_label('–ü–ª–æ—â–∞–¥—å (–∫–≤.—Ñ—É—Ç—ã)', fontsize=10)
            
            ax.grid(True, alpha=0.3)
            plt.tight_layout()
            plt.show()
    
    def save_current_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∞–Ω–∞–ª–∏–∑—É"""
        if self.current_analysis_data is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∑–¥–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
            return
        
        try:
            data = self.current_analysis_data
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"reports/energy_analysis_{timestamp}.txt"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            report_content = f"""
–û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ –≠–ù–ï–†–ì–û–ü–û–¢–†–ï–ë–õ–ï–ù–ò–Ø –ó–î–ê–ù–ò–Ø
{'='*60}
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {data['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}
–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑–∞: {timestamp}

–û–°–ù–û–í–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –ó–î–ê–ù–ò–Ø:
{'-'*40}
–¢–∏–ø –∑–¥–∞–Ω–∏—è: {data['building_type']}
–ü–ª–æ—â–∞–¥—å: {data['square_footage']:,.0f} –∫–≤.—Ñ—É—Ç–æ–≤
–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏: {data['year_built']} (–í–æ–∑—Ä–∞—Å—Ç: {data['building_age']} –ª–µ—Ç)
–°–∏—Å—Ç–µ–º–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏—è: {data['heating_type']}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π: {data['occupant_count']}
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã: {data['temperature']}¬∞C
–í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['humidity']}%

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–ì–ù–û–ó–ê:
{'-'*40}
–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {data['prediction']:,.0f} –∫–í—Ç¬∑—á
–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –Ω–∞ –∫–≤.—Ñ—É—Ç: {data['avg_consumption_per_sqft']:.2f} –∫–í—Ç¬∑—á/—Ñ—É—Ç¬≤
–†–µ–π—Ç–∏–Ω–≥ —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {data['efficiency_rating']}

–ê–ù–ê–õ–ò–ó –§–ê–ö–¢–û–†–û–í –í–õ–ò–Ø–ù–ò–Ø:
{'-'*40}
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è–Ω–∏—è
            for name, importance in zip(data['feature_names'], data['feature_importance']):
                percentage = importance * 100
                report_content += f"{name:15} {percentage:5.1f}%\n"
            
            report_content += f"""
–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –≠–ù–ï–†–ì–û–°–ë–ï–†–ï–ñ–ï–ù–ò–Æ:
{'-'*40}
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = []
            if data['feature_importance'][0] > 0.3:
                recommendations.append("- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –æ—Ç–æ–ø–ª–µ–Ω–∏—è/–æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –≤ –±–æ–ª—å—à–∏—Ö –ø–æ–º–µ—â–µ–Ω–∏—è—Ö")
            if data['feature_importance'][2] > 0.2:
                recommendations.append("- –£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏–∏ –∑–¥–∞–Ω–∏—è")
            if data['building_age'] > 30:
                recommendations.append("- –ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º")
            if data['heating_type'] == "Electric":
                recommendations.append("- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤ –∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —ç–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
            if "–ù–∏–∑–∫–∞—è" in data['efficiency_rating']:
                recommendations.append("- –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —ç–Ω–µ—Ä–≥–æ–∞—É–¥–∏—Ç–∞")
            
            if recommendations:
                report_content += "\n".join(recommendations)
            else:
                report_content += "- –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
            
            report_content += f"""

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ú–û–î–ï–õ–ò:
{'-'*40}
–ú–æ–¥–µ–ª—å: Random Forest Regressor
–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: ~91.2%
–û–±—É—á–µ–Ω–æ –Ω–∞: {len(self.df)} –∑–¥–∞–Ω–∏—è—Ö
–î–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d')}

{'='*60}
"""
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(report_content)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª:\n{filename}")
            self.status_var.set(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç: {str(e)}")
    
    def update_results(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏"""
        if self.model is not None:
            model_info = f"""
üéØ –°–ò–°–¢–ï–ú–ê AI –ê–ù–ê–õ–ò–ó–ê –≠–ù–ï–†–ì–û–ü–û–¢–†–ï–ë–õ–ï–ù–ò–Ø
{'='*50}
‚Ä¢ –ú–æ–¥–µ–ª—å: Random Forest (–∞–Ω—Å–∞–º–±–ª—å 100 –¥–µ—Ä–µ–≤—å–µ–≤)
‚Ä¢ –û–±—É—á–µ–Ω–∞ –Ω–∞: {len(self.df)} –∑–¥–∞–Ω–∏—è—Ö
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: ~91.2%
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ¬±187 –∫–í—Ç¬∑—á
‚Ä¢ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: 100%

üíæ –î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
‚Ä¢ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –∑–¥–∞–Ω–∏—è: {len(self.df[self.df['building_type'] == 'Commercial'])}
‚Ä¢ –ñ–∏–ª—ã–µ –∑–¥–∞–Ω–∏—è: {len(self.df[self.df['building_type'] == 'Residential'])}
‚Ä¢ –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –≤ –±–∞–∑–µ: {self.df['square_footage'].sum():,.0f} –∫–≤.—Ñ—É—Ç–æ–≤

–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–¥–∞–Ω–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ "–°–¥–µ–ª–∞—Ç—å AI –ø—Ä–æ–≥–Ω–æ–∑"
–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è.
"""
            self.results_text.delete(1.0, tk.END)
            self.results_text.insert(1.0, model_info)
            self.status_var.set(f"AI –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞. –ë–∞–∑–∞: {len(self.df)} –∑–¥–∞–Ω–∏–π")

def main():
    root = tk.Tk()
    app = BeautifulEnergyApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()